#!/bin/bash

# üîí Script de Valida√ß√£o de Seguran√ßa - Verificar dados sens√≠veis
# Sistema de Gerenciamento de Alunos

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}üîí Verificando Seguran√ßa antes do Commit...${NC}"
echo ""

# Lista de padr√µes perigosos
SENSITIVE_PATTERNS=(
    "Password=.*[^\"']"
    "password.*="
    "secret.*="
    "key.*="
    "@.*\.supabase\.co"
    "Host=.*\..*\..*"
    "Username=postgres.*Password="
    "JWT.*="
    "API.*KEY"
    "SECRET.*KEY"
)

# Lista de arquivos a verificar
FILES_TO_CHECK=(
    "appsettings.json"
    "appsettings.Production.json"
    "docker-compose.yml"
    "render.yaml"
    "*.env"
    "*.config"
)

FOUND_ISSUES=0

echo -e "${YELLOW}üìÅ Verificando arquivos sens√≠veis...${NC}"

for pattern in "${SENSITIVE_PATTERNS[@]}"; do
    echo -e "${YELLOW}üîç Procurando padr√£o: $pattern${NC}"
    
    # Buscar em todos os arquivos relevantes
    if grep -r --include="*.json" --include="*.yml" --include="*.yaml" --include="*.env" --include="*.config" -n "$pattern" . 2>/dev/null; then
        echo -e "${RED}‚ùå ENCONTRADO PADR√ÉO SENS√çVEL: $pattern${NC}"
        FOUND_ISSUES=1
    fi
done

echo ""

# Verificar arquivos espec√≠ficos
echo -e "${YELLOW}üìã Verificando arquivos espec√≠ficos...${NC}"

# appsettings.json
if [ -f "GerenciadorDeAlunos/appsettings.json" ]; then
    if grep -q "Host=.*\." "GerenciadorDeAlunos/appsettings.json"; then
        echo -e "${RED}‚ùå appsettings.json cont√©m connection string real${NC}"
        FOUND_ISSUES=1
    else
        echo -e "${GREEN}‚úÖ appsettings.json est√° limpo${NC}"
    fi
fi

# docker-compose.yml
if [ -f "docker-compose.yml" ]; then
    if grep -q "Password=" "docker-compose.yml"; then
        echo -e "${RED}‚ùå docker-compose.yml cont√©m password hardcoded${NC}"
        FOUND_ISSUES=1
    else
        echo -e "${GREEN}‚úÖ docker-compose.yml est√° usando vari√°veis${NC}"
    fi
fi

# render.yaml
if [ -f "render.yaml" ]; then
    if grep -q "Host=" "render.yaml"; then
        echo -e "${RED}‚ùå render.yaml cont√©m dados sens√≠veis${NC}"
        FOUND_ISSUES=1
    else
        echo -e "${GREEN}‚úÖ render.yaml est√° seguro${NC}"
    fi
fi

echo ""

# Verificar se .env est√° no .gitignore
if [ -f ".gitignore" ]; then
    if grep -q "\.env" ".gitignore"; then
        echo -e "${GREEN}‚úÖ .env est√° no .gitignore${NC}"
    else
        echo -e "${RED}‚ùå .env N√ÉO est√° no .gitignore${NC}"
        FOUND_ISSUES=1
    fi
fi

echo ""

# Resultado final
if [ $FOUND_ISSUES -eq 0 ]; then
    echo -e "${GREEN}üéâ =================================="
    echo "   VERIFICA√á√ÉO DE SEGURAN√áA PASSOU!"
    echo "   Nenhum dado sens√≠vel encontrado"
    echo "==================================="
    echo -e "${NC}"
    echo ""
    echo -e "${GREEN}‚úÖ Seguro para commit e deploy!${NC}"
    exit 0
else
    echo -e "${RED}üö® =================================="
    echo "   PROBLEMAS DE SEGURAN√áA ENCONTRADOS!"
    echo "   N√ÉO FA√áA COMMIT AINDA!"
    echo "===================================="
    echo -e "${NC}"
    echo ""
    echo -e "${YELLOW}üîß A√ß√µes necess√°rias:${NC}"
    echo "1. Remova dados sens√≠veis dos arquivos"
    echo "2. Use vari√°veis de ambiente"
    echo "3. Execute novamente este script"
    echo "4. S√≥ ent√£o fa√ßa o commit"
    echo ""
    exit 1
fi
